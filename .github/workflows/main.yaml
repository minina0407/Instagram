name: Deploy to AWS CodeDeploy

on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
     
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create deployment directory
        run: mkdir -p /home/runner/PortfoGram/PortfoGram

      - name: Set up Gradle
        run: |
          cd /home/runner/PortfoGram/PortfoGram
          wget https://services.gradle.org/distributions/gradle-7.6.1-bin.zip
          unzip -d $HOME/gradle gradle-7.6.1-bin.zip
          echo "export PATH=\$PATH:$HOME/gradle/gradle-7.6.1/bin" >> $HOME/.bashrc
          
      
      - name: Initialize Gradle Wrapper
        run: |
          cd /home/runner/PortfoGram/PortfoGram
          echo "include ':app'" > settings.gradle
        shell: bash

      - name: Build with Gradle
        run: |
          cd /home/runner/PortfoGram/PortfoGram
          $HOME/gradle/gradle-7.6.1/bin/gradle build
        shell: bash
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.7-7/x64

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_PASSWORD }}
          envs: GITHUB_SHA
          script: |
                REPOSITORY=/home/runner/PortfoGram
                PROJECT_NAME=PortfoGram

                cd $REPOSITORY/$PROJECT_NAME

                echo "> Git pull"

                git pull

                echo "> 프로젝트 Build 시작"

                ./gradlew build

                echo "> step1 디렉토리로 이동"

                cd $REPOSITORY

                echo "> Build 파일복사"

                cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/

                echo "> 현재 구동중인 애플리케이션 pid 확인"

                CURRENT_PID=$(pgrep -f ${PROJECT_NAME}.*.jar)

                echo " 현재 구동중인 애플리케이션pid: $CURRENT_PID"

                if [ -z "$CURRENT_PID" ]; then
                        echo "> 현재구동중인 애플리케이션이 없으므로 종료하지 않습니다."
                else
                        echo "> kill -15 $CURRENT_PID"
                    kill -15 $CURRENT_PID
                    sleep 5
                fi

                echo "> 새 애플리케이션 배포"

                JAR_NAME=$(ls -tr $REPOSITORY/ | grep jar | tail -n 1)

                echo "> JAR Name: $JAR_NAME"



                nohup java -jar \
                   -Dspring.config.location=classpath:/application.properties,/home/runner/PortfoGram/PortfoGram/application.properties \
                   $REPOSITORY/$JAR_NAME 2>&1 &



