# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 환경별 properties 파일 생성(1) - application.properties
      - name: make application.properties
        if: |
          contains(github.ref, 'main') 
        run: |
          mkdir ./src/main/resources # resources 폴더 생성
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application.properties # application.properties 생성
          echo "${{ secrets.properties }}" > ./application.properties # github actions에서 설정한 값을 application.properties 파일에 쓰기
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.6.1
          arguments: build
          run: ./gradlew clean build --exclude-task test
     
      - name: Create archive directory
        run: mkdir -p /tmp/archive

      - name: Copy JAR files to archive directory
        run: cp ./build/libs/*.jar /tmp/archive/

      - name: Create tar.gz archive
        run: tar -czvf /tmp/$(date +%s).tar.gz -C /tmp/archive/ .

      # Deploy to EC2
      - name: Copy files to EC2 instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "/tmp/*.tar.gz"
          target: "/home/ubuntu/app.tar.gz"

      - name: Extract archive on EC2 instance
        run: ssh -i ${{ secrets.SERVER_SSH_KEY }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'tar -xzvf /home/ubuntu/app.tar.gz -C /home/ubuntu/'

      - name: Start application on EC2 instance
        run: ssh -i ${{ secrets.SERVER_SSH_KEY }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'nohup java -jar /home/ubuntu/app.jar > /dev/null 2>&1 &'
